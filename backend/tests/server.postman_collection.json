{
	"info": {
		"_postman_id": "882ab74f-390b-43c3-a635-146c8a638fcf",
		"name": "DIT192",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET /api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api",
					"host": [
						"{{host}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /api/camels",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Save and read environment variables",
							"",
							"// 1) Create an environment in Postman:",
							"// https://www.getpostman.com/docs/v6/postman/environments_and_globals/manage_environments",
							"",
							"// 2) Save reponse data in environment variable",
							"var jsonData = pm.response.json();",
							"var camelId = jsonData._id",
							"pm.collectionVariables.set(\"camel_id\", camelId);",
							"",
							"// 3) Use variable in later requests via {{variable}}",
							"// GET {{host}}/api/camels/{{camel_id}}",
							"var getCamelId = pm.variables.get(\"camel_id\");",
							"",
							"// Test assertion examples",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Body has correct color and position\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.color).to.eql(\"orange\");",
							"    pm.expect(jsonData.position).to.eql(7);",
							"});",
							"",
							"pm.test(\"Body has _id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData._id).to.be.a('String');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"color\": \"orange\",\n\t\"position\": 7\n}\n"
				},
				"url": {
					"raw": "{{host}}/api/camels?=",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"camels"
					],
					"query": [
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/camels",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/camels?=",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"camels"
					],
					"query": [
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/camels/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/camels/{{camel_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"camels",
						"{{camel_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /api/attractions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"// Test assertion examples",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Data is present in the body\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"data\")",
							"});",
							"",
							"pm.test(\"Data has correct attraction name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.name).to.eql(\"The Loophole Plunge\");",
							"});",
							"",
							"pm.test(\"Data has _id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data._id).to.be.a('String')",
							"    pm.collectionVariables.set(\"attraction_id\", jsonData.data._id);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"The Loophole Plunge\",\n    \"description\": \"The first and only roller coaster to feature a loop-the-looping design. The loop will be so tight you won't believe your eyes when you reach the top!\",\n    \"price\": 45,\n    \"status\": \"open\",\n    \"latitude\": 57.695886,\n    \"logitude\": 11.991146,\n    \"queueTime\": \"10 minutes\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/attractions",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"attractions"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/attractions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test assertion examples",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data is present in the body\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"data\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/attractions",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"attractions"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/attractions/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test assertion examples",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data is present in the body\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"data\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/attractions/{{attraction_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"attractions",
						"{{attraction_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /api/attractions/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test assertion examples",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data is present in the body\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"data\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Test\",\n    \"description\": \"Updated description\",\n    \"latitude\": \"Updated latitude\",\n    \"longitude\": \"Updated longitude\",\n    \"queueTime\": \"Updated queueTime\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/attractions/{{attraction_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"attractions",
						"{{attraction_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /api/attractions/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test assertion examples",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data is present in the body\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"data\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/attractions/{{attraction_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"attractions",
						"{{attraction_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/attractions/:wrongId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test assertion examples",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/attractions/{{attraction_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"attractions",
						"{{attraction_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /api/attractions/:wrongId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test assertion examples",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Test\",\n    \"description\": \"Updated description\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/attractions/{{attraction_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"attractions",
						"{{attraction_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /api/attractions/:wrongId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test assertion examples",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/attractions/{{attraction_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"attractions",
						"{{attraction_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9b994a8f-dc75-4a03-b078-91ff08b94c8a",
			"key": "host",
			"value": "http://localhost:3000"
		},
		{
			"id": "12255588-c9f6-4468-80ff-a2479653d5df",
			"key": "attraction_id",
			"value": ""
		},
		{
			"id": "8ffe9bc9-638b-4f67-857e-6dacdd48bced",
			"key": "camel_id",
			"value": ""
		}
	]
}